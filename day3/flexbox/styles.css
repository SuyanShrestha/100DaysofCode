*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

.centerdiv{
    float: left;
    background-color: aqua;
}

/* flex is generally row by default, where main axis is horiizontal. 
Here justify content allows placement horizontal-wise, whereas align-items allows placement vertical wise
*/

.centerdiv, .floatingdiv{
    display: flex;
    justify-content: center;
    align-items: center;

    height: 20vh;
    width: 50vw;
}

.floatingdiv{
    background-color: yellow;
}

/* value of flex-direction can be row, row-reverse, column, and column-reverse. When set to column, main axis is vertical
 So justify content will be vertical now, wheres align-items will be horizontal
*/

.diffcolumn{
    flex-direction: row-reverse;
    /* flex-direction: column huda */
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    height: 20vh;
    width: 60vw;
    background-color: chocolate;
}

/* We can also apply order to each individual items.
The order is by default zero, but can be adjusted to positive or negative integer as per requirementr.
*/

.yellow{
    order: 2
}

/* To apply align-item like properties to each individual item, use align-self
eg:
The 1st item is set to flex-start.
The 2nd item is set to flex-end.
The 3rd item is set to center.
The 4th item is set to baseline.
The 5th item is set to stretch.
*/

/* We can use flex-wrap to spread out squeezed items
    values are nowrap, wrap, and wrap-reverse
*/

/* align-items spreads the child elements vertically with space between them. align-content
 bunches them together as if they were one element. The key property is flex-wrap. 
 When nowrap (or when there is no extra space in the cross axis), align-content has no effect 
 
 The align-items property is used to align multiple rows, whereas the align-content property is used for items within a single row
 */